USE [LIVE]
GO
/****** Object:  StoredProcedure [dbo].[GGP_SP_InventurBestand]    Script Date: 22.12.2017 11:33:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[GGP_SP_InventurBestand]
	@p_Case_ varchar(255) = '',
	@p_para1 varchar(255) = '',
	@p_para2 varchar(255) = '',
	@p_para3 varchar(255) = '',
	@p_para4 varchar(255) = '',
	@p_para5 varchar(255) = '',
	@p_para6 varchar(255) = '',
	@p_para7 varchar(255) = '',
	@p_para8 varchar(255) = '',
	@p_para9 varchar(2000) = '',
	@OUTPUT_RES AS varchar(1000) = '' OUTPUT
AS
BEGIN

	DECLARE
	@Case_ varchar(255) = '',
	@para1 varchar(255) = '',
	@para2 varchar(255) = '',
	@para3 varchar(255) = '',
	@para4 varchar(255) = '',
	@para5 varchar(255) = '',
	@para6 varchar(255) = '',
	@para7 varchar(255) = '',
	@para8 varchar(255) = '',
	@para9 varchar(2000) = ''

	SET @Case_ = @p_Case_
	SET @para1 = @p_para1
	SET @para2 = @p_para2
	SET @para3 = @p_para3
	SET @para4 = @p_para4
	SET @para5 = @p_para5
	SET @para6 = @p_para6
	SET @para7 = @p_para7
	SET @para8 = @p_para8
	SET @para9 = @p_para9

	--Liefert Inventurbestand
	IF @Case_ = 'Inventurbestand'
	BEGIN
		DECLARE @pST_Inventurbestand varchar(255)
		SET @pST_Inventurbestand = @para1

		IF @pST_Inventurbestand = 'Lagerplatz'
		BEGIN
			SELECT '*** Alle Lagerplätze ***' AS CODE 
			UNION ALL
			SELECT CODE FROM DATA0016 ORDER BY CODE
		END

		IF @pST_Inventurbestand = 'InventurbestandAlles'
		BEGIN
			SELECT
				D17_PTR,
				CODE, 
				INV_PART_NUMBER, 
				INV_PART_DESCRIPTION, 
				EINK_Einheit,
				LAGER_Einheit,
				CAST(ISNULL(EinhKonvFaktor, 0) AS DECIMAL(10,4)) AS EinhKonvFaktor,
				CAST(ISNULL(VerfuegbarLagerplatz, 0) AS DECIMAL(10,4)) AS VerfuegbarLagerplatz,
				CAST(Kaufmenge AS DECIMAL(10,4)) AS VerfuegbarLagerplatz_Konv,
				CAST(ISNULL(Normalkosten, 0) AS DECIMAL(10,4)) AS Normalkosten,
				CAST(ISNULL(Preis_LetztBestellung, 0) AS DECIMAL(10,4)) AS Preis_LetztBestellung,
				CAST(ISNULL(Preis_gewichtet12Mon, 0) AS DECIMAL(10,4)) AS Preis_gewichtet12Mon,
				CAST(ISNULL(Preis_gewichtet12MonJHA, 0) AS DECIMAL(10,4)) AS Preis_gewichtet12MonJHA,
				--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Normalkosten AS DECIMAL(10,4)) AS NK_Wert,
				CASE
				WHEN ISNULL(Normalkosten, 0)>0 THEN
					(SELECT VerfuegbarLagerplatz*Normalkosten AS RES)
				ELSE
					(SELECT 0 AS RES)
				END AS NK_Wert,
				--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Preis_LetztBestellung AS DECIMAL(10,4)) AS LB_Wert,
				CASE
				WHEN ISNULL(Preis_LetztBestellung, 0)>0 THEN
					(SELECT Kaufmenge*Preis_LetztBestellung AS RES)
				ELSE
					--(SELECT 0 AS RES) Vorgaben MSE am 11.10.2015
					(SELECT VerfuegbarLagerplatz*Normalkosten AS RES)
				END AS LB_Wert,
				--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Preis_gewichtet12Mon AS DECIMAL(10,4)) AS DB_Wert
				CASE
				WHEN ISNULL(Preis_gewichtet12Mon, 0)>0 THEN
					(SELECT Kaufmenge*Preis_gewichtet12Mon AS RES)
				ELSE
					--(SELECT 0 AS RES) Vorgaben MSE am 11.10.2015
					(SELECT VerfuegbarLagerplatz*Normalkosten AS RES)
				END  AS DB_Wert,
				CASE WHEN ISNULL(Preis_gewichtet12MonJHA, 0)>0 THEN
					(SELECT Kaufmenge*Preis_gewichtet12MonJHA AS RES)
				ELSE
					--(SELECT 0 AS RES) Vorgaben MSE am 11.10.2015
					(SELECT VerfuegbarLagerplatz*Normalkosten AS RES)
				END  AS DB_WertJHA,
				CASE
					WHEN Preis_LetztBestellung=0 AND Preis_gewichtet12Mon=0 THEN
						'keine Bestellung vorhanden (wird mit Standardkosten gerechnet)'
					ELSE
						''
				END AS BestellInfo

				FROM
				(
					SELECT  TOP 100 PERCENT 
						dbo.DATA0017.RKEY AS D17_PTR,
						dbo.DATA0016.CODE, 
						dbo.DATA0017.INV_PART_NUMBER, 
						--dbo.DATA0017.INV_PART_DESCRIPTION, 
						CASE
							WHEN ISNULL(dbo.DATA0017.LONG_INVENTORY_PART_NUMBER, '')<>'' THEN 
								dbo.DATA0017.LONG_INVENTORY_PART_NUMBER
							ELSE
								dbo.DATA0017.INV_PART_DESCRIPTION
						END AS INV_PART_DESCRIPTION,
						DATA0002_1.UNIT_CODE AS LAGER_Einheit,
						dbo.DATA0002.UNIT_CODE AS EINK_Einheit,
						dbo.DATA0017.STOCK_PURCH AS EinhKonvFaktor,
						dbo.DATA0019.QUAN_ON_HAND As VerfuegbarLagerplatz,
						dbo.DATA0019.QUAN_ON_HAND/dbo.DATA0017.STOCK_PURCH As Kaufmenge,
						ISNULL(dbo.DATA0017.STD_COST, 0) As Normalkosten,
						(
							SELECT     TOP 1 ISNULL(D71.PRICE/D70.EXCHANGE_RATE, 0) AS RES
							FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
							WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY)
							ORDER BY D95.TRAN_DATE DESC

						) AS Preis_LetztBestellung,
						(
							CASE
								WHEN
								ISNULL(
								(SELECT
									SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
									FROM
									(
										SELECT     PRICE, QUAN_RECD, QUAN_RETN, EXCHANGE_RATE
										FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
										WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
												AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
												AND (ISNULL(D71.PRICE, 0) > 0)
												AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
									) As myTbl12Mon
								), 0)>0 THEN 
								(
									SELECT
									SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
									FROM
									(
										SELECT     PRICE, QUAN_RECD, QUAN_RETN, EXCHANGE_RATE
										FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
										WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
												AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
												AND (ISNULL(D71.PRICE, 0) > 0)
												AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
									) As myTbl12Mon
								)
								ELSE
								(
									SELECT     TOP 1 ISNULL(D71.PRICE/D70.EXCHANGE_RATE, 0) AS RES
									FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
									WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY)
									ORDER BY D95.TRAN_DATE DESC
								)
							END
						) AS Preis_gewichtet12Mon,
					CAST(ISNULL((
						SELECT TOP 1
							SUM(Res_DREPreis*Menge)/SUM(Menge) AS DPreis_12Mon
						FROM
						(
							SELECT     
								CASE 
									WHEN ISNULL(D108.PRICE, 0)>0 THEN (D108.PRICE/dbo.DATA0107.EX_RATE) --/ISNULL((SELECT TOP 1 CONVERSION_FACTOR 
																										--FROM dbo.DATA0028 
																										--WHERE dbo.DATA0028.SUPPLIER_PTR=D70.SUPPLIER_POINTER
																										--	AND dbo.DATA0028.INVENTORY_PTR=D17.RKEY), D17.STOCK_PURCH)
																										-- Weil Einlagerungsmenge in der Einkaufseinheit ist 08.09.16/Dsi
									ELSE
										CASE WHEN ISNULL(D71.PRICE, 0)>0 THEN (D71.PRICE/D70.EXCHANGE_RATE)	--/ISNULL((SELECT TOP 1 CONVERSION_FACTOR 
																											--FROM dbo.DATA0028 
																											--WHERE dbo.DATA0028.SUPPLIER_PTR=D70.SUPPLIER_POINTER
																											--AND dbo.DATA0028.INVENTORY_PTR=D17.RKEY), D17.STOCK_PURCH) 
																											-- Weil Einlagerungsmenge in der Einkaufseinheit ist 08.09.16/Dsi
											ELSE 0
										END
								END AS Res_DREPreis,
								D95.QUANTITY As Menge,
								D95.INVT_PTR
							FROM         dbo.DATA0107 INNER JOIN
												  dbo.DATA0108 AS D108 ON dbo.DATA0107.RKEY = D108.DATA0107_PTR RIGHT OUTER JOIN
												  dbo.DATA0095 AS D95 INNER JOIN
												  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
												  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
												  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY INNER JOIN
												  dbo.DATA0017 ON D95.INVT_PTR = dbo.DATA0017.RKEY ON D108.DATA0071_PTR = D71.RKEY
							WHERE     
								(D95.TRAN_TP = 5) 
								AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
						) AS myDPreisTbl
						WHERE
								INVT_PTR=dbo.DATA0017.RKEY AND Res_DREPreis*Menge>0
					), dbo.DATA0017.STD_COST*dbo.DATA0017.STOCK_PURCH) AS FLOAT) AS Preis_gewichtet12MonJHA

					FROM         dbo.DATA0019 WITH (NOLOCK) INNER JOIN
										  dbo.DATA0016 WITH (NOLOCK) ON dbo.DATA0019.LOCATION_PTR = dbo.DATA0016.RKEY INNER JOIN
										  dbo.DATA0017 ON dbo.DATA0019.INVENTORY_PTR = dbo.DATA0017.RKEY INNER JOIN
										  dbo.DATA0002 ON dbo.DATA0017.PURCH_UNIT_PTR = dbo.DATA0002.RKEY INNER JOIN
										  dbo.DATA0002 AS DATA0002_1 ON dbo.DATA0017.STOCK_UNIT_PTR = DATA0002_1.RKEY
					WHERE     
						(dbo.DATA0017.ACTIVE_FLAG = 'Y') 
						--AND (ISNULL(dbo.DATA0017.MANUFACTURER_CODE, '') = '') 01.12.2014/DSI deaktiviert nach Absprache mit Hr. Wienecke (wegen Hr. Seidels Inventurberichten)
						--AND (dbo.DATA0017.S_B_N = 'N') 
						AND (dbo.DATA0017.TTYPE = 'R') 
						AND (dbo.DATA0017.PROD_CODE_SELL_PTR <> 95) 
						AND (dbo.DATA0017.INV_PART_NUMBER NOT LIKE 'REC-%') AND 
										  (dbo.DATA0019.QUAN_ON_HAND > 0) 
											--AND (NOT (dbo.DATA0017.RKEY IN (312, 55, 410, 798, 1005, 29881, 28876)))
						AND dbo.DATA0016.CODE LIKE @para2
					) AS myTbl
					ORDER BY CODE, INV_PART_NUMBER, INV_PART_DESCRIPTION
		END

		IF @pST_Inventurbestand = 'InventurbestandAllesGrp'
		BEGIN
			--DECLARE
			--@para2 varchar(255)
			--SET @para2 = '%'

			SELECT
				CODE,
				SUM(NK_Wert) AS NK_Wert,
				SUM(LB_Wert) AS LB_Wert, 
				SUM(DB_Wert) AS DB_Wert,
				SUM(DBjha_Wert) AS DBjha_Wert,
				BestellInfo
			FROM
			(
				SELECT
					--D17_PTR,
					CODE, 
					--INV_PART_NUMBER, 
					--INV_PART_DESCRIPTION, 
					--EINK_Einheit,
					--LAGER_Einheit,
					--CAST(ISNULL(EinhKonvFaktor, 0) AS DECIMAL(10,4)) AS EinhKonvFaktor,
					--CAST(ISNULL(VerfuegbarLagerplatz, 0) AS DECIMAL(10,4)) AS VerfuegbarLagerplatz,
					--CAST(Kaufmenge AS DECIMAL(10,4)) AS VerfuegbarLagerplatz_Konv,
					--CAST(ISNULL(Normalkosten, 0) AS DECIMAL(10,4)) AS Normalkosten,
					--CAST(ISNULL(Preis_LetztBestellung, 0) AS DECIMAL(10,4)) AS Preis_LetztBestellung,
					--CAST(ISNULL(Preis_gewichtet12Mon, 0) AS DECIMAL(10,4)) AS Preis_gewichtet12Mon,
					----CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Normalkosten AS DECIMAL(10,4)) AS NK_Wert,
					CASE
						WHEN ISNULL(Normalkosten, 0)>0 THEN
							(SELECT  VerfuegbarLagerplatz*Normalkosten AS RES)
						ELSE
							(SELECT  0 AS RES)
					END AS NK_Wert,
					--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Preis_LetztBestellung AS DECIMAL(10,4)) AS LB_Wert,
					CASE
						WHEN ISNULL(Preis_LetztBestellung, 0)>0 THEN
							(SELECT Kaufmenge*Preis_LetztBestellung AS RES)
						ELSE
							--(SELECT 0 AS RES) --Vorgaben MSE 11.10.2015
							(SELECT  VerfuegbarLagerplatz*Normalkosten AS RES)
					END AS LB_Wert,
					--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Preis_gewichtet12Mon AS DECIMAL(10,4)) AS DB_Wert
					CASE
						WHEN ISNULL(Preis_gewichtet12Mon, 0)>0 THEN
							(SELECT Kaufmenge*Preis_gewichtet12Mon AS RES)
						ELSE
							--(SELECT  0 AS RES) --Vorgaben MSE 11.10.2015
							(SELECT  VerfuegbarLagerplatz*Normalkosten AS RES)
					END AS DB_Wert,
					CASE
						WHEN ISNULL(Preis_gewichtet12Mon_JHA, 0)>0 THEN
							(SELECT Kaufmenge*Preis_gewichtet12Mon_JHA AS RES)
						ELSE
							--(SELECT  0 AS RES) --Vorgaben MSE 11.10.2015
							(SELECT  VerfuegbarLagerplatz*Normalkosten AS RES)
					END AS DBjha_Wert,
					CASE
						WHEN Preis_LetztBestellung=0 AND Preis_gewichtet12Mon=0 THEN
							'keine Bestellung vorhanden (wird mit Standardkosten gerechnet)'
						ELSE
							''
					END AS BestellInfo										

					FROM
					(
						SELECT  TOP 100 PERCENT 
							dbo.DATA0017.RKEY AS D17_PTR,
							dbo.DATA0016.CODE, 
							dbo.DATA0017.INV_PART_NUMBER, 
							--dbo.DATA0017.INV_PART_DESCRIPTION, 
							CASE
								WHEN ISNULL(dbo.DATA0017.LONG_INVENTORY_PART_NUMBER, '')<>'' THEN 
									dbo.DATA0017.LONG_INVENTORY_PART_NUMBER
								ELSE
									dbo.DATA0017.INV_PART_DESCRIPTION
							END AS INV_PART_DESCRIPTION,
							DATA0002_1.UNIT_CODE AS LAGER_Einheit,
							dbo.DATA0002.UNIT_CODE AS EINK_Einheit,
							dbo.DATA0017.STOCK_PURCH AS EinhKonvFaktor,
							dbo.DATA0019.QUAN_ON_HAND As VerfuegbarLagerplatz,
							dbo.DATA0019.QUAN_ON_HAND/dbo.DATA0017.STOCK_PURCH As Kaufmenge,
							ISNULL(dbo.DATA0017.STD_COST, 0) As Normalkosten,
							(
								SELECT     TOP 1 ISNULL(D71.PRICE/D70.EXCHANGE_RATE, 0) AS RES
								FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
								WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY)
								ORDER BY D95.TRAN_DATE DESC

							) AS Preis_LetztBestellung,
							ISNULL((
								CASE
									WHEN
									ISNULL(
									(SELECT
										SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
										FROM
										(
											SELECT     PRICE, QUAN_RECD, QUAN_RETN, EXCHANGE_RATE
											FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
											WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
													AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
													AND (ISNULL(D71.PRICE, 0) > 0)
													AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
										) As myTbl12Mon
									), 0)>0 THEN 
									(
										SELECT
										SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
										FROM
										(
											SELECT     PRICE, QUAN_RECD, QUAN_RETN, EXCHANGE_RATE
											FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
											WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
													AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
													AND (ISNULL(D71.PRICE, 0) > 0)
													AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
										) As myTbl12Mon
									)
									ELSE
									(
										SELECT     TOP 1 ISNULL(D71.PRICE/D70.EXCHANGE_RATE, 0) AS RES
											FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
										WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY)
										ORDER BY D95.TRAN_DATE DESC
									)
								END
							), 0) AS Preis_gewichtet12Mon,
							ISNULL((
								CASE
									WHEN
										ISNULL((
												SELECT     TOP (1) ISNULL(dbo.DATA0108.PRICE/dbo.DATA0107.EX_RATE, 0) AS RES
												FROM         dbo.DATA0095 AS D95 INNER JOIN
																		dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																		dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																		dbo.DATA0108 ON D71.RKEY = dbo.DATA0108.DATA0071_PTR INNER JOIN
																		dbo.DATA0107 ON dbo.DATA0108.DATA0107_PTR = dbo.DATA0107.RKEY
												WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
												ORDER BY D95.TRAN_DATE DESC
										), 0)>0 THEN 
										(
											SELECT
												SUM(PRICE/EX_RATE*QUANTITY)/SUM(QUANTITY) AS RES
											FROM
											(
												SELECT     dbo.DATA0108.PRICE, dbo.DATA0108.QUANTITY, dbo.DATA0107.EX_RATE
												FROM         dbo.DATA0095 AS D95 INNER JOIN
																		dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																		dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																		dbo.DATA0108 ON D71.RKEY = dbo.DATA0108.DATA0071_PTR INNER JOIN
																		dbo.DATA0107 ON dbo.DATA0108.DATA0107_PTR = dbo.DATA0107.RKEY
												WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
														AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
														AND (ISNULL(D71.PRICE, 0) > 0)
														AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
											) As myTbl12Mon
										)
									ELSE
										ISNULL((
											SELECT   											
												SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
											FROM
											(
												SELECT     PRICE, QUAN_RECD, QUAN_RETN, EXCHANGE_RATE
												FROM         dbo.DATA0095 AS D95 INNER JOIN
															  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
															  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
												WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
														AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
														AND (ISNULL(D71.PRICE, 0) > 0)
														AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
											) As myTbl12Mon
										), dbo.DATA0017.STD_COST)
								END
							), 0) AS Preis_gewichtet12Mon_JHA


						FROM         dbo.DATA0019 WITH (NOLOCK) INNER JOIN
											  dbo.DATA0016 WITH (NOLOCK) ON dbo.DATA0019.LOCATION_PTR = dbo.DATA0016.RKEY INNER JOIN
											  dbo.DATA0017 ON dbo.DATA0019.INVENTORY_PTR = dbo.DATA0017.RKEY INNER JOIN
											  dbo.DATA0002 ON dbo.DATA0017.PURCH_UNIT_PTR = dbo.DATA0002.RKEY INNER JOIN
											  dbo.DATA0002 AS DATA0002_1 ON dbo.DATA0017.STOCK_UNIT_PTR = DATA0002_1.RKEY
						WHERE     
							(dbo.DATA0017.ACTIVE_FLAG = 'Y') 
							--AND (ISNULL(dbo.DATA0017.MANUFACTURER_CODE, '') = '') 01.12.2014/DSI deaktiviert nach Absprache mit Hr. Wienecke (wegen Hr. Seidels Inventurberichten)
							--AND (dbo.DATA0017.S_B_N = 'N') 
							AND (dbo.DATA0017.TTYPE = 'R') 
							AND (dbo.DATA0017.PROD_CODE_SELL_PTR <> 95) 
							AND (dbo.DATA0017.INV_PART_NUMBER NOT LIKE 'REC-%') AND 
											  (dbo.DATA0019.QUAN_ON_HAND > 0) 
												--AND (NOT (dbo.DATA0017.RKEY IN (312, 55, 410, 798, 1005, 29881, 28876)))
							AND dbo.DATA0016.CODE LIKE @para2
						) AS myTbl
					) AS myGrpTbl 
					GROUP BY CODE, BestellInfo
					ORDER BY CODE --, INV_PART_NUMBER, INV_PART_DESCRIPTION		
		END

		IF @pST_Inventurbestand = 'InventurbestandAlles_Konsi'
		BEGIN
			SELECT
				D17_PTR,
				CODE, 
				INV_PART_NUMBER, 
				INV_PART_DESCRIPTION, 
				EINK_Einheit,
				LAGER_Einheit,
				CAST(ISNULL(EinhKonvFaktor, 0) AS DECIMAL(10,4)) AS EinhKonvFaktor,
				CAST(ISNULL(VerfuegbarLagerplatz, 0) AS DECIMAL(10,4)) AS VerfuegbarLagerplatz,
				CAST(Kaufmenge AS DECIMAL(10,4)) AS VerfuegbarLagerplatz_Konv,
				CAST(ISNULL(Normalkosten, 0) AS DECIMAL(10,4)) AS Normalkosten,
				CAST(ISNULL(Preis_LetztBestellung, 0) AS DECIMAL(10,4)) AS Preis_LetztBestellung,
				CAST(ISNULL(Preis_gewichtet12Mon, 0) AS DECIMAL(10,4)) AS Preis_gewichtet12Mon,
				--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Normalkosten AS DECIMAL(10,4)) AS NK_Wert,
				CASE
				WHEN ISNULL(Normalkosten, 0)>0 THEN
					(SELECT VerfuegbarLagerplatz*Normalkosten AS RES)
				ELSE
					(SELECT 0 AS RES)
				END AS NK_Wert,
				--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Preis_LetztBestellung AS DECIMAL(10,4)) AS LB_Wert,
				CASE
				WHEN ISNULL(Preis_LetztBestellung, 0)>0 THEN
					(SELECT Kaufmenge*Preis_LetztBestellung AS RES)
				ELSE
					(SELECT 0 AS RES)
				END AS LB_Wert,
				--CAST(VerfuegbarLagerplatz/EinhKonvFaktor*Preis_gewichtet12Mon AS DECIMAL(10,4)) AS DB_Wert
				CASE
				WHEN ISNULL(Preis_gewichtet12Mon, 0)>0 THEN
					(SELECT Kaufmenge*Preis_gewichtet12Mon AS RES)
				ELSE
					(SELECT 0 AS RES)
				END  AS DB_Wert

				FROM
				(
					SELECT  TOP 100 PERCENT 
						dbo.DATA0017.RKEY AS D17_PTR,
						dbo.DATA0016.CODE, 
						dbo.DATA0017.INV_PART_NUMBER, 
						--dbo.DATA0017.INV_PART_DESCRIPTION, 
						CASE
							WHEN ISNULL(dbo.DATA0017.LONG_INVENTORY_PART_NUMBER, '')<>'' THEN 
								dbo.DATA0017.LONG_INVENTORY_PART_NUMBER
							ELSE
								dbo.DATA0017.INV_PART_DESCRIPTION
						END AS INV_PART_DESCRIPTION,
						DATA0002_1.UNIT_CODE AS LAGER_Einheit,
						dbo.DATA0002.UNIT_CODE AS EINK_Einheit,
						dbo.DATA0017.STOCK_PURCH AS EinhKonvFaktor,
						dbo.DATA0340.QUANTITY As VerfuegbarLagerplatz,
						dbo.DATA0340.QUANTITY/dbo.DATA0017.STOCK_PURCH As Kaufmenge,
						ISNULL(dbo.DATA0017.STD_COST, 0) As Normalkosten,
						ISNULL((
							--SELECT     TOP 1 ISNULL(D71.PRICE, 0) AS RES
							--FROM         dbo.DATA0095 AS D95 INNER JOIN
							--					  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
							--					  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
							--WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY)
							--ORDER BY D95.TRAN_DATE DESC
							SELECT     TOP 1 ISNULL(D467.PRICE, 0) AS RES 
							FROM         dbo.DATA0341 AS D341 INNER JOIN
										dbo.DATA0467 AS D467 ON D341.DATA0467_PTR = D467.RKEY
							WHERE     (D341.TRAN_TP = 1) AND (D467.INVT_PTR = dbo.DATA0017.RKEY)
							ORDER BY D341.TRAN_DATE DESC

						), 0) AS Preis_LetztBestellung,
						ISNULL((
							CASE
								WHEN
								ISNULL(
								(
									--SELECT
									--	SUM(PRICE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
									--FROM
									--(
									--	SELECT     PRICE, QUAN_RECD, QUAN_RETN
									--	FROM         dbo.DATA0095 AS D95 INNER JOIN
									--						  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
									--						  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
									--	WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
									--			AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
									--			AND (ISNULL(D71.PRICE, 0) > 0)
									--			AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
									--) As myTbl12Mon
									SELECT
										SUM(PRICE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
									FROM
									(
										SELECT     PRICE, QUAN_RECD, QUAN_RETN
										FROM         dbo.DATA0341 AS D341 INNER JOIN
												dbo.DATA0467 AS D467 ON D341.DATA0467_PTR = D467.RKEY
										WHERE     (D341.TRAN_TP = 1) AND (D467.INVT_PTR = dbo.DATA0017.RKEY) 
												AND (D341.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
												AND (ISNULL(D467.PRICE, 0) > 0)
												AND ISNULL(D467.QUAN_RECD, 0) - ISNULL(D467.QUAN_RETN, 0) > 0
									) As myTbl12Mon
								), 0)>0 THEN 
								(
									--SELECT
									--SUM(PRICE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
									--FROM
									--(
									--	SELECT     PRICE, QUAN_RECD, QUAN_RETN
									--	FROM         dbo.DATA0095 AS D95 INNER JOIN
									--						  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
									--						  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
									--	WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY) 
									--			AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
									--			AND (ISNULL(D71.PRICE, 0) > 0)
									--			AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
									--) As myTbl12Mon
									SELECT
										SUM(PRICE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
									FROM
									(
										SELECT     PRICE, QUAN_RECD, QUAN_RETN
										FROM         dbo.DATA0341 AS D341 INNER JOIN
												dbo.DATA0467 AS D467 ON D341.DATA0467_PTR = D467.RKEY
										WHERE     (D341.TRAN_TP = 1) AND (D467.INVT_PTR = dbo.DATA0017.RKEY) 
												AND (D341.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
												AND (ISNULL(D467.PRICE, 0) > 0)
												AND ISNULL(D467.QUAN_RECD, 0) - ISNULL(D467.QUAN_RETN, 0) > 0
									) As myTbl12Mon
								)
								ELSE
								(
									--SELECT     TOP 1 ISNULL(D71.PRICE, 0) AS RES
									--FROM         dbo.DATA0095 AS D95 INNER JOIN
									--					  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
									--					  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
									--WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = dbo.DATA0017.RKEY)
									--ORDER BY D95.TRAN_DATE DESC
									SELECT     TOP 1 ISNULL(D467.PRICE, 0) AS RES 
									FROM         dbo.DATA0341 AS D341 INNER JOIN
												dbo.DATA0467 AS D467 ON D341.DATA0467_PTR = D467.RKEY
									WHERE     (D341.TRAN_TP = 1) AND (D467.INVT_PTR = dbo.DATA0017.RKEY)
									ORDER BY D341.TRAN_DATE DESC
								)
							END
						), 0) AS Preis_gewichtet12Mon

					FROM         
							  dbo.DATA0002 INNER JOIN
							  dbo.DATA0017 ON dbo.DATA0002.RKEY = dbo.DATA0017.PURCH_UNIT_PTR INNER JOIN
							  dbo.DATA0002 AS DATA0002_1 ON dbo.DATA0017.STOCK_UNIT_PTR = DATA0002_1.RKEY INNER JOIN
							  dbo.DATA0340 INNER JOIN
							  dbo.DATA0016 WITH (NOLOCK) ON dbo.DATA0340.DATA0016_PTR = dbo.DATA0016.RKEY ON dbo.DATA0017.RKEY = dbo.DATA0340.DATA0017_PTR
					WHERE     
						(dbo.DATA0017.ACTIVE_FLAG = 'Y') 
						--AND (ISNULL(dbo.DATA0017.MANUFACTURER_CODE, '') = '') 01.12.2014/DSI deaktiviert nach Absprache mit Hr. Wienecke (wegen Hr. Seidels Inventurberichten)
						--AND (dbo.DATA0017.S_B_N = 'N') 
						AND (dbo.DATA0017.TTYPE = 'R') 
						AND (dbo.DATA0017.PROD_CODE_SELL_PTR <> 95) 
						AND (dbo.DATA0017.INV_PART_NUMBER NOT LIKE 'REC-%') AND 
										  (dbo.DATA0340.QUANTITY > 0) 
											--AND (NOT (dbo.DATA0017.RKEY IN (312, 55, 410, 798, 1005, 29881, 28876)))
						AND dbo.DATA0016.CODE LIKE @para2
					) AS myTbl
					ORDER BY CODE, INV_PART_NUMBER, INV_PART_DESCRIPTION
		END

	END

	IF @Case_ = 'Inventurbestand_LageplaetzeMonatlich'
	BEGIN
		--DECLARE 
		--@para1 varchar(255)
		--SET @para1 = '2016'	--Jahr

		SELECT
			Location_Code,
			SUM(Dez_Vorjahr) AS Dez_Vorjahr,
			SUM(Jan_Jahr) AS Jan_Jahr,
			SUM(Jan_Jahr) - SUM(Dez_Vorjahr) AS Diff_Jan_Dez,
			SUM(Feb_Jahr) AS Feb_Jahr,
			SUM(Feb_Jahr) - SUM(Jan_Jahr) AS Diff_Feb_Jan,
			SUM(Mrz_Jahr) AS Mrz_Jahr,
			SUM(Mrz_Jahr) - SUM(Feb_Jahr) AS Diff_Mrz_Feb,
			SUM(Apr_Jahr) AS Apr_Jahr,
			SUM(Apr_Jahr) - SUM(Mrz_Jahr) AS Diff_Apr_Mrz,
			SUM(Mai_Jahr) AS Mai_Jahr,
			SUM(Mai_Jahr) - SUM(Apr_Jahr) AS Diff_Mai_Apr,
			SUM(Jun_Jahr) AS Jun_Jahr,
			SUM(Jun_Jahr) - SUM(Mai_Jahr) AS Diff_Jun_Mai,
			SUM(Jul_Jahr) AS Jul_Jahr,
			SUM(Jul_Jahr) - SUM(Jun_Jahr) AS Diff_Jul_Jun,
			SUM(Aug_Jahr) AS Aug_Jahr,
			SUM(Aug_Jahr) - SUM(Jul_Jahr) AS Diff_Aug_Jul,
			SUM(Sep_Jahr) AS Sep_Jahr,
			SUM(Sep_Jahr) - SUM(Aug_Jahr) AS Diff_Sep_Aug,
			SUM(Okt_Jahr) AS Okt_Jahr,
			SUM(Okt_Jahr) - SUM(Sep_Jahr) AS Diff_Okt_Sep,
			SUM(Nov_Jahr) AS Nov_Jahr,
			SUM(Nov_Jahr) - SUM(Okt_Jahr) AS Diff_Nov_Okt,
			SUM(Dez_Jahr) AS Dez_Jahr,
			SUM(Dez_Jahr) - SUM(Nov_Jahr) AS Diff_Dez_Nov
		FROM
		(
			SELECT DISTINCT
				tblRHB.Location_Code,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(CAST((CAST(@para1 AS INT)-1) AS VARCHAR(4))) + '.12'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Dez_Vorjahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.01'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Jan_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.02'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Feb_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.03'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Mrz_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.04'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Apr_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.05'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Mai_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.06'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Jun_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.07'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Jul_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.08'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Aug_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.09'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Sep_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.10'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Okt_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.11'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Nov_Jahr,
				ISNULL((
						SELECT TOP 1
							SUM(LGWert) AS RES
						FROM
						(
							SELECT 
								JahrMonat,
								Location_Code,
								ISNULL((
									(LgMg/Umrechnungsfaktor_Stamm)
									*
									CASE
										WHEN ISNULL(PreisGewDurch12MonRech, 0) > 0 THEN
											PreisGewDurch12MonRech
										ELSE
											StdCost
									END
								), 0) AS LGWert
							FROM
								LIVE2.dbo.PEX_Inventurbestaende_RHB
						) AS tblLGWert
						WHERE
							tblLGWert.JahrMonat = RTRIM(@para1) + '.12'
							AND tblLGWert.Location_Code = tblRHB.Location_Code
				), 0) AS Dez_Jahr
			FROM
				LIVE2.dbo.PEX_Inventurbestaende_RHB AS tblRHB
			WHERE
				ISNULL(tblRHB.Location_Code, '') <> ''
		) AS tblMonate
		GROUP BY
			Location_Code
		ORDER BY
			tblMonate.Location_Code
	END


	--------------------------------------------------------------
	-- Inventur Ende Monat
	--------------------------------------------------------------
	IF @Case_ = 'PruefenObInventurbestandWegspeichertWurde'
	BEGIN
		SELECT TOP 1 ISNULL(COUNT(ID), 0) AS AnzDS FROM LIVE2.dbo.PEX_Inventurbestaende_RHB WHERE JahrMonat = LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)))
	END
	IF @Case_ = 'ParadigmInventurbestandWegspeichern'
	BEGIN
		--DECLARE @OUTPUT_RES AS varchar(1000)

		DECLARE @tblArtLager table (
									INVENTORY_PTR numeric(10,0) null,
									CODE char(5) null
									)

		--Lagerplatzartikel hinzufügen
		INSERT @tblArtLager(
						INVENTORY_PTR, 
						CODE
						)
		SELECT DISTINCT 
					TOP 100 PERCENT dbo.DATA0017.RKEY AS INVENTORY_PTR, dbo.DATA0016.CODE
		FROM         dbo.DATA0017 INNER JOIN
							  dbo.DATA0019 ON dbo.DATA0017.RKEY = dbo.DATA0019.INVENTORY_PTR INNER JOIN
							  dbo.DATA0016 ON dbo.DATA0019.LOCATION_PTR = dbo.DATA0016.RKEY
		WHERE     (dbo.DATA0017.ACTIVE_FLAG = 'Y') AND (ISNULL(dbo.DATA0017.MANUFACTURER_CODE, '') = '') AND (dbo.DATA0017.S_B_N = 'N') AND (dbo.DATA0017.TTYPE = 'R' OR
							  dbo.DATA0017.TTYPE = 'M') AND (dbo.DATA0017.PROD_CODE_SELL_PTR <> 95) AND (dbo.DATA0017.INV_PART_NUMBER NOT LIKE 'REC-%') AND 
							  (dbo.DATA0019.RKEY NOT IN (312, 55, 410, 798, 1005, 29881, 28876)) 
		
		--Batchartikel hinzufügen
		INSERT @tblArtLager(
						INVENTORY_PTR, 
						CODE
						)
		SELECT     dbo.DATA0019.INVENTORY_PTR, dbo.DATA0016.CODE
		FROM         dbo.DATA0017 INNER JOIN
							  dbo.DATA0019 ON dbo.DATA0017.RKEY = dbo.DATA0019.INVENTORY_PTR INNER JOIN
							  dbo.DATA0016 ON dbo.DATA0019.LOCATION_PTR = dbo.DATA0016.RKEY
		WHERE     (dbo.DATA0017.S_B_N = 'B') 
					AND (dbo.DATA0017.TTYPE = 'R' OR dbo.DATA0017.TTYPE = 'M')
		
		--Konsiartikel hinzufügen
		INSERT @tblArtLager(
						INVENTORY_PTR, 
						CODE
						)
		SELECT     dbo.DATA0017.RKEY AS INVENTORY_PTR, dbo.DATA0016.CODE
		FROM         dbo.DATA0340 INNER JOIN
							  dbo.DATA0017 ON dbo.DATA0340.DATA0017_PTR = dbo.DATA0017.RKEY INNER JOIN
							  dbo.DATA0016 ON dbo.DATA0340.DATA0016_PTR = dbo.DATA0016.RKEY
		WHERE 
		RTRIM(dbo.DATA0017.INV_PART_NUMBER) + RTRIM(dbo.DATA0017.INV_PART_DESCRIPTION) + RTRIM(dbo.DATA0016.CODE)
		Not In
		(
			SELECT     RTRIM(dbo.DATA0017.INV_PART_NUMBER) + RTRIM(dbo.DATA0017.INV_PART_DESCRIPTION) + RTRIM(dbo.DATA0016.CODE) AS Res
			FROM         dbo.DATA0019 INNER JOIN
							  dbo.DATA0017 ON dbo.DATA0019.INVENTORY_PTR = dbo.DATA0017.RKEY INNER JOIN
							  dbo.DATA0016 ON dbo.DATA0019.LOCATION_PTR = dbo.DATA0016.RKEY
			WHERE     (dbo.DATA0017.TTYPE = 'R' OR dbo.DATA0017.TTYPE = 'M')
		)
		
		DECLARE 
				@p_INVENTORY_PTR numeric(10,0),
				@p_CODE char(5)

		--#######################################################################################
		BEGIN TRANSACTION  --####################################################################
		--#######################################################################################

		------------------ CURSOR SPECIFIC CODE BEGIN --------------------
		-- declare the fast_forward cursor.  notice we are essentially
		-- using a SELECT query to build a list to iterate through
		DECLARE myCursorSample CURSOR fast_forward FOR SELECT INVENTORY_PTR, CODE FROM @tblArtLager

		-- now we have to open the cursor and tell it to go
		-- acquire (i.e. FETCH) the NEXT (i.e. first since this is the first call)
		-- item in the list
		OPEN myCursorSample
		FETCH NEXT FROM myCursorSample INTO @p_INVENTORY_PTR, @p_CODE

		WHILE @@FETCH_STATUS = 0 
		BEGIN       

			--PRINT ('Artikel/Code: ' + STR(@p_INVENTORY_PTR) + ', ' + @p_CODE)

			IF Not Exists(SELECT * FROM LIVE2.dbo.PEX_Inventurbestaende_RHB
							WHERE JahrMonat = STR(YEAR(GETDATE())) + '.' + RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)
									AND INV_PTR = @p_INVENTORY_PTR AND LOCATION_CODE = @p_CODE)
			BEGIN
			
				DECLARE
					@ib_JahrMonat varchar(7),
					@ib_INV_PART_NUMBER char(40),
					@ib_INV_PART_DESCRIPTION char(40),
					@ib_STD_COST numeric(20, 7),
					@ib_NEW_STD_COST numeric(20, 7),
					@ib_UNIT_CODE varchar(5),
					@ib_UNIT_CODE_Eink varchar(5),
					@ib_PreisLetzteBestellung numeric(20, 7),
					@ib_PreisGewDurch12MonRech numeric(20, 7),
					@ib_Umrechnungsfaktor_Stamm numeric(20, 7),
					@ib_LOCATION char(20),
					@ib_LgMgVM numeric(20, 7),
					@ib_LgMgVM_Konsi numeric(20, 7),
					@ib_LgMg numeric(20, 7),
					@ib_LgMg_Konsi numeric(20, 7),
					@ib_PreisLetzteRechnung numeric(20, 7),
					@ib_PreisGewDurch12Mon_JHA numeric(20, 7)
					
				SET @ib_JahrMonat = LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)))
				SET @ib_INV_PART_NUMBER = (SELECT TOP 1 INV_PART_NUMBER FROM DATA0017 WHERE RKEY=@p_INVENTORY_PTR)
				SET @ib_INV_PART_DESCRIPTION = (SELECT TOP 1 INV_PART_DESCRIPTION FROM DATA0017 WHERE RKEY=@p_INVENTORY_PTR)
				SET @ib_STD_COST = ISNULL((SELECT TOP 1 STD_COST FROM DATA0017 WHERE RKEY=@p_INVENTORY_PTR), 0)
				SET @ib_NEW_STD_COST = ISNULL((SELECT TOP 1 NEW_STD_COST FROM DATA0017 WHERE RKEY=@p_INVENTORY_PTR), 0)
				SET @ib_UNIT_CODE = (SELECT TOP 1 UNIT_CODE FROM dbo.DATA0002 INNER JOIN dbo.DATA0017 ON dbo.DATA0002.RKEY = dbo.DATA0017.STOCK_UNIT_PTR WHERE dbo.DATA0017.RKEY = @p_INVENTORY_PTR)
				SET @ib_UNIT_CODE_Eink = (SELECT TOP 1 UNIT_CODE FROM dbo.DATA0002 INNER JOIN dbo.DATA0017 ON dbo.DATA0002.RKEY = dbo.DATA0017.PURCH_UNIT_PTR WHERE dbo.DATA0017.RKEY = @p_INVENTORY_PTR)
				SET @ib_PreisLetzteBestellung = ISNULL((
														SELECT TOP 1 ISNULL(D71.PRICE, 0) AS RES
														FROM dbo.DATA0095 AS D95 INNER JOIN
															dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
															dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
														WHERE (D95.TRAN_TP = 5) 
																AND (D95.INVT_PTR = @p_INVENTORY_PTR)
														ORDER BY D95.TRAN_DATE DESC
														), 0)
				SET @ib_PreisGewDurch12MonRech = ISNULL((
								CASE
									WHEN
									ISNULL(
									(SELECT
										SUM(PRICE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
										FROM
										(
											SELECT     PRICE, QUAN_RECD, QUAN_RETN
											FROM         dbo.DATA0095 AS D95 INNER JOIN
																  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
											WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR) 
													AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
													AND (ISNULL(D71.PRICE, 0) > 0)
													AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
										) As myTbl12Mon
									), 0)>0 THEN 
									(
										SELECT
										SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
										FROM
										(
											SELECT     D71.PRICE, D71.QUAN_RECD, D71.QUAN_RETN, D70.EXCHANGE_RATE
											FROM         dbo.DATA0095 AS D95 INNER JOIN
																  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
											WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR) 
													AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
													AND (ISNULL(D71.PRICE, 0) > 0)
													AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
										) As myTbl12Mon
									)
									ELSE
									(
										SELECT     TOP 1 ISNULL(D71.PRICE/D70.EXCHANGE_RATE, 0) AS RES
										FROM         dbo.DATA0095 AS D95 INNER JOIN
																  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
										WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR)
										ORDER BY D95.TRAN_DATE DESC
									)
								END
														), 0)
				SET @ib_Umrechnungsfaktor_Stamm = ISNULL((SELECT TOP 1 STOCK_PURCH FROM DATA0017 WHERE RKEY=@p_INVENTORY_PTR), 0)
				SET @ib_LOCATION = (SELECT TOP 1 LOCATION FROM DATA0016 WHERE UPPER(CODE) = @p_CODE)
				IF RIGHT('00'+RTRIM(LTRIM(STR(DATEPART(m, GETDATE())))),2)<>'01'
				BEGIN
					SET @ib_LgMgVM = ISNULL((SELECT TOP 1 LgMg FROM LIVE2.dbo.PEX_Inventurbestaende_RHB 
									WHERE LOCATION_CODE = @p_CODE AND INV_PTR = @p_INVENTORY_PTR
										AND JahrMonat = RTRIM(LTRIM(STR(YEAR(GETDATE())))) + '.' + RIGHT('00'+RTRIM(LTRIM(STR( DATEPART(m, GETDATE())-1))),2) )
									, 0)
					SET @ib_LgMgVM_Konsi = ISNULL((SELECT TOP 1 LgMg_Konsi FROM LIVE2.dbo.PEX_Inventurbestaende_RHB 
									WHERE LOCATION_CODE = @p_CODE AND INV_PTR = @p_INVENTORY_PTR
										AND JahrMonat = RTRIM(LTRIM(STR(YEAR(GETDATE())))) + '.' + RIGHT('00'+RTRIM(LTRIM(STR( DATEPART(m, GETDATE())-1))),2) )
											, 0)
				END
				ELSE
				BEGIN
					SET @ib_LgMgVM = ISNULL((SELECT TOP 1 LgMg FROM LIVE2.dbo.PEX_Inventurbestaende_RHB 
									WHERE LOCATION_CODE = @p_CODE AND INV_PTR = @p_INVENTORY_PTR
										AND JahrMonat = RTRIM(LTRIM(STR(YEAR(GETDATE())-1))) + '.12')
									, 0)
					SET @ib_LgMgVM_Konsi = ISNULL((SELECT TOP 1 LgMg_Konsi FROM LIVE2.dbo.PEX_Inventurbestaende_RHB 
									WHERE LOCATION_CODE = @p_CODE AND INV_PTR = @p_INVENTORY_PTR
										AND JahrMonat = RTRIM(LTRIM(STR(YEAR(GETDATE())-1))) + '.12')
											, 0)
				END
				SET @ib_LgMg = ISNULL((SELECT TOP 1 dbo.DATA0019.QUAN_ON_HAND
											FROM dbo.DATA0019 INNER JOIN
												dbo.DATA0016 ON dbo.DATA0019.LOCATION_PTR = dbo.DATA0016.RKEY
											WHERE (dbo.DATA0016.CODE = @p_CODE) AND (dbo.DATA0019.INVENTORY_PTR = @p_INVENTORY_PTR)
											), 0)
				SET @ib_LgMg_Konsi = ISNULL((SELECT SUM(dbo.DATA0340.QUANTITY) AS Res
											FROM dbo.DATA0340 INNER JOIN
												dbo.DATA0016 ON dbo.DATA0340.DATA0016_PTR = dbo.DATA0016.RKEY
											WHERE (dbo.DATA0016.CODE = @p_CODE) AND (dbo.DATA0340.DATA0017_PTR = @p_INVENTORY_PTR)
											), 0)
				SET @ib_PreisLetzteRechnung = ISNULL((
														SELECT     TOP (1) ISNULL(dbo.DATA0108.PRICE, 0) AS RES
														FROM         dbo.DATA0095 AS D95 INNER JOIN
																			  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																			  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																			  dbo.DATA0108 ON D71.RKEY = dbo.DATA0108.DATA0071_PTR INNER JOIN
																			  dbo.DATA0107 ON dbo.DATA0108.DATA0107_PTR = dbo.DATA0107.RKEY
														WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR)
														ORDER BY D95.TRAN_DATE DESC
														), 0)
				SET @ib_PreisGewDurch12Mon_JHA = ISNULL((
								CASE
									WHEN
										ISNULL((
												SELECT     TOP (1) ISNULL(dbo.DATA0108.PRICE, 0) AS RES
												FROM         dbo.DATA0095 AS D95 INNER JOIN
																		dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																		dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																		dbo.DATA0108 ON D71.RKEY = dbo.DATA0108.DATA0071_PTR INNER JOIN
																		dbo.DATA0107 ON dbo.DATA0108.DATA0107_PTR = dbo.DATA0107.RKEY
												WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR) AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
												ORDER BY D95.TRAN_DATE DESC
										), 0)>0 THEN 
										/*(SELECT
											SUM(PRICE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
											FROM
											(
												SELECT     PRICE, QUAN_RECD, QUAN_RETN
												FROM         dbo.DATA0095 AS D95 INNER JOIN
																	  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																	  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY
												WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR) 
														AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
														AND (ISNULL(D71.PRICE, 0) > 0)
														AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
											) As myTbl12Mon
										), 0)>0 THEN */
									(
										SELECT
											SUM(PRICE/EX_RATE*QUANTITY)/SUM(QUANTITY) AS RES
										FROM
										(
											SELECT DISTINCT
												 dbo.DATA0108.RKEY AS D108_PTR,
											     dbo.DATA0108.PRICE, 
												 dbo.DATA0108.QUANTITY, 
												 dbo.DATA0107.EX_RATE
											FROM         dbo.DATA0095 AS D95 INNER JOIN
																	dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																	dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																	dbo.DATA0108 ON D71.RKEY = dbo.DATA0108.DATA0071_PTR INNER JOIN
																	dbo.DATA0107 ON dbo.DATA0108.DATA0107_PTR = dbo.DATA0107.RKEY
											WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR) 
													AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
													AND (ISNULL(D71.PRICE, 0) > 0)
													AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
										) As myTbl12Mon
									)
									ELSE
									(
										SELECT   											
											SUM(PRICE/EXCHANGE_RATE*(QUAN_RECD - QUAN_RETN))/SUM(QUAN_RECD - QUAN_RETN) AS RES
										FROM
										(
											SELECT DISTINCT
												D71.RKEY AS D71_PTR,
												D71.PRICE, 
												D71.QUAN_RECD, 
												D71.QUAN_RETN, 
												D70.EXCHANGE_RATE
											FROM         dbo.DATA0095 AS D95 INNER JOIN
																  dbo.DATA0022 AS D22 ON D95.SRCE_PTR = D22.RKEY INNER JOIN
																  dbo.DATA0071 AS D71 ON D22.SOURCE_PTR = D71.RKEY INNER JOIN
																  dbo.DATA0070 AS D70 ON D71.PO_PTR = D70.RKEY
											WHERE     (D95.TRAN_TP = 5) AND (D95.INVT_PTR = @p_INVENTORY_PTR) 
													AND (D95.TRAN_DATE > DATEADD(mm, - 12, GETDATE())) 
													AND (ISNULL(D71.PRICE, 0) > 0)
													AND ISNULL(D71.QUAN_RECD, 0) - ISNULL(D71.QUAN_RETN, 0) > 0
										) As myTbl12Mon
									)
								END
														), 0)

				INSERT INTO LIVE2.dbo.PEX_Inventurbestaende_RHB  
				(
					JahrMonat,
					Datum,
					RKEY,
					LOCATION,
					INV_PART_DESCRIPTION,
					StdCost,
					TmpStdCost,
					LgMg,
					LgMgVM,
					Warenwert,
					LagerEH,
					INV_PART_NUMBER,
					PreisLetzteBestellung,
					PreisGewDurch12MonRech,
					Umrechnungsfaktor_Stamm,
					INV_PTR,
					LOCATION_CODE,
					Einkaufseinheit,
					Meister,
					LgMg_Konsi,
					LgMgVM_Konsi,
					AppMSSQLDatenbank,
					PreisLetzteRechnung,
					PreisGewDurch12Mon_JHA
				)
				VALUES 
				(
					@ib_JahrMonat, --JahrMonat
					GETDATE(),
					@p_INVENTORY_PTR,
					@ib_LOCATION, --LOCATION,
					@ib_INV_PART_DESCRIPTION,
					@ib_STD_COST,
					@ib_NEW_STD_COST,
					@ib_LgMg,
					@ib_LgMgVM, --LgMgVM
					0, --Warenwert
					@ib_UNIT_CODE,
					@ib_INV_PART_NUMBER,
					@ib_PreisLetzteBestellung,
					@ib_PreisGewDurch12MonRech,
					@ib_Umrechnungsfaktor_Stamm,
					@p_INVENTORY_PTR,
					@p_CODE, --LOCATION_CODE
					@ib_UNIT_CODE_Eink, --Einkaufseinheit
					'', --Meister
					@ib_LgMg_Konsi, --LgMg_Konsi
					@ib_LgMgVM_Konsi, --LgMgVM_Konsi
					db_name(),
					@ib_PreisLetzteRechnung,
					@ib_PreisGewDurch12Mon_JHA
				)

			END

			-- get the next article from the table using the cursor
			FETCH NEXT FROM myCursorSample INTO @p_INVENTORY_PTR, @p_CODE
		END

		CLOSE myCursorSample 
		DEALLOCATE myCursorSample

		IF @@ERROR <> 0 
		BEGIN
			--#######################################################################################
			ROLLBACK TRANSACTION  --#################################################################
			--#######################################################################################
			SELECT TOP 1 @@ERROR AS RES
			--RETURN @@ERROR
		END
		ELSE
		BEGIN
		--#######################################################################################
		COMMIT TRANSACTION  --###################################################################
		--#######################################################################################
			SELECT TOP 1 STR(COUNT(ID)) AS AnzDS FROM LIVE2.dbo.PEX_Inventurbestaende_RHB WHERE JahrMonat = @ib_JahrMonat
		END
	END

	IF @Case_ = 'PruefenObLPbestandWegspeichertWurde'
	BEGIN
		SELECT TOP 1 ISNULL(COUNT(ID), 0) AS AnzDS FROM LIVE2.dbo.PEX_Inventurbestaende_LP WHERE JahrMonat = LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)))
	END
	IF @Case_ = 'ParadigmLPbestandWegspeichern'
	BEGIN
		--#######################################################################################
		BEGIN TRANSACTION  --####################################################################
		--#######################################################################################

		INSERT LIVE2.dbo.PEX_Inventurbestaende_LP(
													D10_PTR,
													D50_PTR,
													D6_PTR,
													D63_PTR,	
													D63_SO_PTR,	
													CUSTOMER_NAME,	
													Kundenteil,	
													SALES_ORDER,	
													WORK_ORDER_NUMBER,	
													ACT_COMPL_DATE,
													LB_Konsi,
													WertKonsi_EUR,	
													gebLB_GGP,	
													WertGGP_EUR,	
													PART_PRICE,	
													DBPreis12Mon,
													EXCH_RATE,	
													Reservierungsdatum,	
													LTage,	
													KommGeplantAm,	
													LTageBisLieferung,	
													KommStatus,	
													JahrMonat,	
													Datum
												)

		SELECT
			ISNULL(D10_PTR, 0) AS D10_PTR,
			ISNULL(D50_PTR, 0) AS D50_PTR,
			ISNULL(D6_PTR, 0) AS D6_PTR,
			ISNULL(D63_PTR, 0) AS D63_PTR,
			ISNULL(D63_SO_PTR, 0) AS D63_SO_PTR,
			Kunde,
			Kundenteil, 
			Kommission,
			FA, 
			abgeschl, 
			LB as LB_Konsi, 
			ISNULL(CAST((CASE WHEN StkPreis=0 THEN leKommPreis_EUR ELSE StkPreis/WK END)*LB AS FLOAT), 0) AS Wert_Konsi,
			ISNULL(Reserviert, 0) AS geb_LB,
			ISNULL(CAST((StkPreis/WK)*Reserviert AS FLOAT), 0) AS Wert_geb_LB,
			ISNULL(CAST(StkPreis/WK AS FLOAT), 0) AS StkPreis,
			CAST(ISNULL((
				SELECT  TOP 1   SUM((dbo.DATA0060.PART_PRICE / dbo.DATA0060.EXCH_RATE) * (dbo.DATA0060.PARTS_ORDERED - dbo.DATA0060.PARTS_RETURNED)) 
									  / SUM(dbo.DATA0060.PARTS_ORDERED - dbo.DATA0060.PARTS_RETURNED) AS RES
				FROM         dbo.DATA0050 INNER JOIN
									  dbo.DATA0060 ON dbo.DATA0050.RKEY = dbo.DATA0060.CUST_PART_PTR
				WHERE     (dbo.DATA0050.RKEY = D50_PTR) AND (dbo.DATA0060.ENT_DATE > DATEADD(mm, - 12, GETDATE()))
			), ISNULL(StkPreis/WK, 0)) AS FLOAT) AS DBPreis12Mon,
			ISNULL(WK, 0) AS WK,
			D63_TDATE AS Reservierungsdatum,
			ISNULL(DATEDIFF(dd, abgeschl, GETDATE()), 0) AS LTage,
			KommGeplantAm,
			ISNULL(DATEDIFF(dd, abgeschl, KommGeplantAm), 0) AS LTageBisLief,
			ISNULL((
					SELECT TOP 1 STATUS FROM dbo.DATA0060 WHERE RKEY = D63_SO_PTR
			), 0) AS KommStatus,
			LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2))) AS JahrMonat,
			GETDATE() AS Datum
		FROM
		(
			SELECT DISTINCT 
				ISNULL(dbo.DATA0010.RKEY, 0) AS D10_PTR,
				ISNULL(dbo.DATA0050.RKEY, 0) AS D50_PTR,
				ISNULL(dbo.DATA0006.RKEY, 0) AS D6_PTR,
				ISNULL(dbo.DATA0063.RKEY, 0) AS D63_PTR,   
				ISNULL(dbo.DATA0063.SO_PTR, 0) AS D63_SO_PTR,
				dbo.DATA0063.TDATE AS D63_TDATE,
				dbo.DATA0010.CUSTOMER_NAME AS Kunde,
				RTRIM(dbo.DATA0050.CUSTOMER_PART_NUMBER) + '.' + LTRIM(dbo.DATA0050.CP_REV) AS Kundenteil, 
				dbo.DATA0050.CP_REV AS Revision,
				dbo.DATA0050.LAST_SO_PRICE AS leKommPreis_EUR,
				ISNULL(dbo.DATA0006.WORK_ORDER_NUMBER, '') AS FA, 
				MAX(dbo.DATA0060.SALES_ORDER) AS Kommission,
				MAX(dbo.DATA0060.DUE_DATE) AS KommGeplantAm,
				dbo.DATA0006.ACT_COMPL_DATE AS abgeschl, 
				CASE WHEN dbo.DATA0053.LOC_PTR=225 THEN ISNULL(dbo.DATA0053.QTY_ON_HAND, 0) ELSE 0 END AS LB,
				CAST(dbo.DATA0063.QUAN_ALLOCATED AS FLOAT) AS Reserviert,
				ISNULL(CAST(MAX(dbo.DATA0060.PART_PRICE) AS FLOAT), 0) AS StkPreis,
				--CAST(MAX(dbo.DATA0060.EXCH_RATE) AS FLOAT) AS WK
				ISNULL(CAST(MAX(dbo.DATA0001.EXCH_RATE) AS FLOAT), 1) AS WK
			--FROM         dbo.DATA0063 INNER JOIN
			--					  dbo.DATA0060 ON dbo.DATA0063.SO_PTR = dbo.DATA0060.RKEY INNER JOIN
			--					  dbo.DATA0053 ON dbo.DATA0063.PART_BATCH_PTR = dbo.DATA0053.RKEY INNER JOIN
			--					  dbo.DATA0050 ON dbo.DATA0053.CUST_PART_PTR = dbo.DATA0050.RKEY INNER JOIN
			--					  dbo.DATA0010 ON dbo.DATA0050.CUSTOMER_PTR = dbo.DATA0010.RKEY INNER JOIN
			--					  dbo.DATA0001 ON dbo.DATA0060.CURRENCY_PTR = dbo.DATA0001.RKEY LEFT OUTER JOIN
			--					  dbo.DATA0006 ON dbo.DATA0053.WORK_ORDER_PTR = dbo.DATA0006.RKEY
			FROM         dbo.DATA0008 INNER JOIN
								  dbo.DATA0050 INNER JOIN
								  dbo.DATA0053 ON dbo.DATA0050.RKEY = dbo.DATA0053.CUST_PART_PTR INNER JOIN
								  dbo.DATA0010 ON dbo.DATA0050.CUSTOMER_PTR = dbo.DATA0010.RKEY ON dbo.DATA0008.RKEY = dbo.DATA0050.PROD_CODE_PTR LEFT OUTER JOIN
								  dbo.DATA0001 INNER JOIN
								  dbo.DATA0063 INNER JOIN
								  dbo.DATA0060 ON dbo.DATA0063.SO_PTR = dbo.DATA0060.RKEY ON dbo.DATA0001.RKEY = dbo.DATA0060.CURRENCY_PTR ON 
								  dbo.DATA0053.RKEY = dbo.DATA0063.PART_BATCH_PTR LEFT OUTER JOIN
								  dbo.DATA0006 ON dbo.DATA0053.WORK_ORDER_PTR = dbo.DATA0006.RKEY
			WHERE     			 
					(
						(dbo.DATA0053.QTY_ON_HAND > 0 AND dbo.DATA0053.LOC_PTR = 225)
						OR
						dbo.DATA0053.QTY_ALLOC > 0
					)
					AND dbo.DATA0053.LOC_PTR IN (18, 225)
				GROUP BY
					dbo.DATA0010.RKEY,
					dbo.DATA0050.RKEY,
					dbo.DATA0006.RKEY, 
					dbo.DATA0063.RKEY,
					dbo.DATA0063.SO_PTR,
					dbo.DATA0063.TDATE,
					dbo.DATA0010.CUSTOMER_NAME,
					RTRIM(dbo.DATA0050.CUSTOMER_PART_NUMBER) + '.' + LTRIM(dbo.DATA0050.CP_REV),
					dbo.DATA0050.CP_REV,
					dbo.DATA0050.LAST_SO_PRICE,
					dbo.DATA0006.WORK_ORDER_NUMBER, 
					dbo.DATA0006.ACT_COMPL_DATE, 
					dbo.DATA0053.QTY_ON_HAND, -- - dbo.DATA0053.QTY_ALLOC, 
					dbo.DATA0063.QUAN_ALLOCATED,
					dbo.DATA0053.LOC_PTR
		) AS tblLB

		IF @@ERROR <> 0 
		BEGIN
			--#######################################################################################
			ROLLBACK TRANSACTION  --#################################################################
			--#######################################################################################
			SELECT TOP 1 @@ERROR AS RES
			--RETURN @@ERROR
		END
		ELSE
		BEGIN
			--#######################################################################################
			COMMIT TRANSACTION  --###################################################################
			--#######################################################################################
			SET @ib_JahrMonat = LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)))
			SELECT TOP 1 STR(COUNT(ID)) AS AnzDS FROM LIVE2.dbo.PEX_Inventurbestaende_LP WHERE JahrMonat = @ib_JahrMonat
		END
	END

	IF @Case_ = 'PruefenObLPFreibestandWegspeichertWurde'
	BEGIN
		SELECT TOP 1 ISNULL(COUNT(ID), 0) AS AnzDS FROM LIVE2.dbo.PEX_Inventurbestaende_LPfrei WHERE JahrMonat = LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)))
	END
	IF @Case_ = 'ParadigmLPFreibestandWegspeichern'
	BEGIN
		--#######################################################################################
		BEGIN TRANSACTION  --####################################################################
		--#######################################################################################

		INSERT LIVE2.dbo.PEX_Inventurbestaende_LPfrei(
														D10_PTR,
														D50_PTR,
														D6_PTR,
														D53_PTR,
														CUSTOMER_NAME,
														Kundenteil,
														leKommission,
														WORK_ORDER_NUMBER,
														ACT_COMPL_DATE,
														freiLB_GGP,
														WertGGP_EUR,
														MaxStkPreis_EUR,
														Einlagerungsdatum,
														PROD_CODE,
														LebensdauerTage,
														Auslaufdatum,
														NochLebensdauerTage,
														JahrMonat,
														Datum
													)
		
		SELECT
			ISNULL(D10_PTR, 0) AS D10_PTR,
			ISNULL(D50_PTR, 0) AS D50_PTR,
			ISNULL(D6_PTR, 0) AS D6_PTR,
			ISNULL(D53_PTR, 0) AS D53_PTR,
			Kunde,
			Kundenteil,
			ltz_Kommission,
			ISNULL(FA, '') AS FA,
			ACT_COMPL_DATE,
			SUM(ELP_LB) AS Menge_ELP_LB,
			SUM(CASE WHEN StkPreis_EUR>0 THEN StkPreis_EUR ELSE LAST_SO_PRICE END * ELP_LB) AS Wert_ELP_LB,
			MAX(CASE WHEN StkPreis_EUR>0 THEN StkPreis_EUR ELSE LAST_SO_PRICE END) AS MAX_StkPreis_EUR,
			Einlagerung,
			PC,
			LDauer,
			DATEADD (DAY, LDauer, Einlagerung)  AS AuslaufDatum,
			DATEDIFF(DAY, GETDATE(), DATEADD (DAY, LDauer, Einlagerung)) AS NochTage,
			LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2))) AS JahrMonat,
			GETDATE() AS Datum
		FROM
		(
			SELECT
				dbo.DATA0010.RKEY AS D10_PTR,
				dbo.DATA0050.RKEY AS D50_PTR,
				dbo.DATA0006.RKEY AS D6_PTR,
				dbo.DATA0053.RKEY AS D53_PTR,
				dbo.DATA0010.CUSTOMER_NAME AS Kunde, 
				LTRIM(RTRIM(dbo.DATA0050.CUSTOMER_PART_NUMBER) + '.' + LTRIM(dbo.DATA0050.CP_REV)) AS Kundenteil, 
				dbo.DATA0006.WORK_ORDER_NUMBER AS FA, 
				dbo.DATA0006.ACT_COMPL_DATE, 
				dbo.DATA0053.QTY_ON_HAND - dbo.DATA0053.QTY_ALLOC AS ELP_LB, 
				dbo.DATA0053.MFG_DATE AS Einlagerung,
				ISNULL((
						SELECT TOP 1 dbo.DATA0060.PART_PRICE / dbo.DATA0060.EXCH_RATE AS RES
						FROM         dbo.DATA0054 INNER JOIN
						  dbo.DATA0060 ON dbo.DATA0054.SO_PTR = dbo.DATA0060.RKEY
						WHERE 
							dbo.DATA0054.WO_PTR = dbo.DATA0006.RKEY 
						ORDER BY
							dbo.DATA0006.RKEY DESC
				), 0) AS StkPreis_EUR,
				ISNULL((
						SELECT TOP 1 dbo.DATA0060.SALES_ORDER AS RES
						FROM         dbo.DATA0054 INNER JOIN
						  dbo.DATA0060 ON dbo.DATA0054.SO_PTR = dbo.DATA0060.RKEY
						WHERE 
							dbo.DATA0054.WO_PTR = dbo.DATA0006.RKEY 
						ORDER BY
							dbo.DATA0060.SALES_ORDER DESC
				), 0) AS ltz_Kommission,
				dbo.DATA0050.LAST_SO_PRICE,
				dbo.DATA0008.PROD_CODE AS PC,
				dbo.DATA0050.SHELF_LIFE AS LDauer
			FROM         dbo.DATA0053 INNER JOIN
								  dbo.DATA0050 ON dbo.DATA0053.CUST_PART_PTR = dbo.DATA0050.RKEY INNER JOIN
								  dbo.DATA0010 ON dbo.DATA0050.CUSTOMER_PTR = dbo.DATA0010.RKEY INNER JOIN
								  dbo.DATA0008 ON dbo.DATA0050.PROD_CODE_PTR = dbo.DATA0008.RKEY LEFT OUTER JOIN
								  dbo.DATA0006 ON dbo.DATA0053.WORK_ORDER_PTR = dbo.DATA0006.RKEY
			WHERE     
				(dbo.DATA0053.QTY_ON_HAND - dbo.DATA0053.QTY_ALLOC) > 0
		) AS tblGrp
		GROUP BY
			D10_PTR,
			D50_PTR,
			D6_PTR,
			D53_PTR,
			Kunde,
			Kundenteil,
			ltz_Kommission,
			FA,
			ACT_COMPL_DATE,
			Einlagerung,
			PC,
			LDauer

		IF @@ERROR <> 0 
		BEGIN
			--#######################################################################################
			ROLLBACK TRANSACTION  --#################################################################
			--#######################################################################################
			SELECT TOP 1 @@ERROR AS RES
			--RETURN @@ERROR
		END
		ELSE
		BEGIN
			--#######################################################################################
			COMMIT TRANSACTION  --###################################################################
			--#######################################################################################
			SET @ib_JahrMonat = LTRIM((RTRIM(STR(YEAR(GETDATE())))) + '.' + RTRIM(RIGHT('00'+LTRIM(STR(DATEPART(m, GETDATE()))),2)))
			SELECT TOP 1 STR(COUNT(ID)) AS AnzDS FROM LIVE2.dbo.PEX_Inventurbestaende_LPfrei WHERE JahrMonat = @ib_JahrMonat
		END
	END

	--Routine, die prüft, ob es falsche Einlagerung gibt
	IF @Case_ = 'LP_Einlagerungen_prüfen'
	BEGIN
		SELECT DISTINCT 
			dbo.DATA0016.LOCATION AS Lagerplatz,
			dbo.DATA0063.TDATE AS ReserviertAm,
			dbo.DATA0010.CUSTOMER_NAME AS Kunde,
			RTRIM(dbo.DATA0050.CUSTOMER_PART_NUMBER) + '.' + LTRIM(dbo.DATA0050.CP_REV) AS Kundenteil, 
			ISNULL(dbo.DATA0006.WORK_ORDER_NUMBER, '') AS FA, 
			(dbo.DATA0060.SALES_ORDER) AS Kommission,
			CAST(CASE WHEN dbo.DATA0053.LOC_PTR=225 THEN ISNULL(dbo.DATA0053.QTY_ON_HAND, 0) ELSE 0 END AS FLOAT) AS LB,
			CAST(dbo.DATA0063.QUAN_ALLOCATED AS FLOAT) AS Reserviert,
			ISNULL(CAST((dbo.DATA0060.PART_PRICE) AS FLOAT), 0) AS StkPreis,
			dbo.DATA0005.EMPLOYEE_NAME AS MA
		FROM         dbo.DATA0005 INNER JOIN
								dbo.DATA0063 INNER JOIN
								dbo.DATA0060 ON dbo.DATA0063.SO_PTR = dbo.DATA0060.RKEY ON dbo.DATA0005.RKEY = dbo.DATA0063.EMPL_PTR RIGHT OUTER JOIN
								dbo.DATA0050 INNER JOIN
								dbo.DATA0053 ON dbo.DATA0050.RKEY = dbo.DATA0053.CUST_PART_PTR INNER JOIN
								dbo.DATA0010 ON dbo.DATA0050.CUSTOMER_PTR = dbo.DATA0010.RKEY INNER JOIN
								dbo.DATA0016 ON dbo.DATA0053.LOC_PTR = dbo.DATA0016.RKEY ON dbo.DATA0063.PART_BATCH_PTR = dbo.DATA0053.RKEY LEFT OUTER JOIN
								dbo.DATA0006 ON dbo.DATA0053.WORK_ORDER_PTR = dbo.DATA0006.RKEY
		WHERE     			 
				--((dbo.DATA0053.QTY_ON_HAND > 0 AND dbo.DATA0053.LOC_PTR = 225) OR dbo.DATA0053.QTY_ALLOC > 0)
				--AND dbo.DATA0053.LOC_PTR NOT IN (18, 225)
				(  			 
					((dbo.DATA0053.QTY_ON_HAND > 0 AND dbo.DATA0053.LOC_PTR = 225) OR dbo.DATA0053.QTY_ALLOC > 0)
					AND 
					dbo.DATA0053.LOC_PTR NOT IN (18, 225)
				)
				OR
				(
					dbo.DATA0053.LOC_PTR = 18
					AND
					RTRIM(dbo.DATA0050.CUSTOMER_PART_NUMBER) + '.' + LTRIM(dbo.DATA0050.CP_REV) COLLATE SQL_Latin1_General_CP1_CI_AS 
					IN (
						SELECT DISTINCT
							Kundenteil
						FROM
							LIVE2.dbo.KONSI_Jahreswerte_Stammtabelle
					)
					AND
					dbo.DATA0053.QTY_ON_HAND > 0
				)
	END

	IF @Case_ = 'LP_Einlagerungen_prüfen2'
	BEGIN
		SELECT DISTINCT 
			dbo.DATA0016.LOCATION AS Lagerplatz,
			dbo.DATA0063.TDATE AS ReserviertAm,
			dbo.DATA0010.CUSTOMER_NAME AS Kunde,
			RTRIM(dbo.DATA0050.CUSTOMER_PART_NUMBER) + '.' + LTRIM(dbo.DATA0050.CP_REV) AS Kundenteil, 
			ISNULL(dbo.DATA0006.WORK_ORDER_NUMBER, '') AS FA, 
			(dbo.DATA0060.SALES_ORDER) AS Kommission,
			CAST(CASE WHEN dbo.DATA0053.LOC_PTR=225 THEN ISNULL(dbo.DATA0053.QTY_ON_HAND, 0) ELSE 0 END AS FLOAT) AS LB,
			CAST(dbo.DATA0063.QUAN_ALLOCATED AS FLOAT) AS Reserviert,
			ISNULL(CAST((dbo.DATA0060.PART_PRICE) AS FLOAT), 0) AS StkPreis,
			dbo.DATA0005.EMPLOYEE_NAME AS MA
		FROM         dbo.DATA0005 INNER JOIN
								dbo.DATA0063 INNER JOIN
								dbo.DATA0060 ON dbo.DATA0063.SO_PTR = dbo.DATA0060.RKEY ON dbo.DATA0005.RKEY = dbo.DATA0063.EMPL_PTR RIGHT OUTER JOIN
								dbo.DATA0050 INNER JOIN
								dbo.DATA0053 ON dbo.DATA0050.RKEY = dbo.DATA0053.CUST_PART_PTR INNER JOIN
								dbo.DATA0010 ON dbo.DATA0050.CUSTOMER_PTR = dbo.DATA0010.RKEY INNER JOIN
								dbo.DATA0016 ON dbo.DATA0053.LOC_PTR = dbo.DATA0016.RKEY ON dbo.DATA0063.PART_BATCH_PTR = dbo.DATA0053.RKEY LEFT OUTER JOIN
								dbo.DATA0006 ON dbo.DATA0053.WORK_ORDER_PTR = dbo.DATA0006.RKEY
		WHERE     		
				LEFT(dbo.DATA0050.CP_REV, 1) IN ('S', 'H', '3')	 
				AND (dbo.DATA0053.QTY_ON_HAND > 0 AND dbo.DATA0053.LOC_PTR = 225) 
				AND (dbo.DATA0060.PART_PRICE * dbo.DATA0053.QTY_ON_HAND) > 500
	END
	--------------------------------------------------------------
	--------------------------------------------------------------
END
